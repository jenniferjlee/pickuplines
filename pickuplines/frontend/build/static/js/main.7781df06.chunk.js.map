{"version":3,"sources":["Category.jsx","Display.jsx","Add.jsx","App.js","serviceWorker.js","index.js"],"names":["Category","cat","callback","useState","checked","setChecked","id","map","tag","i","key","type","name","value","onChange","newChecks","check","index","changeCheck","filter","handleChange","htmlFor","Display","selected","lines","line","setLine","onClick","event","posLines","forEach","length","includes","category","push","Math","floor","random","Add","pickupline","setPickupline","setSelected","addLine","fetch","method","headers","body","JSON","stringify","then","res","json","currentTarget","alert","App","add","setAdd","pickupLines","setPickupLines","categories","setCategories","noDupCategories","Set","useEffect","className","href","rel","role","aria-label","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sRAIe,SAASA,EAAT,GAAsC,IAAlBC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,SAAY,EAGpBC,mBAAS,EAAC,GAAO,GAAO,GAAM,GAAM,GAAM,GAAO,GAAO,GAAM,GAAM,IAHhD,mBAG3CC,EAH2C,KAGlCC,EAHkC,KAsBlD,OACE,6BACE,yBAAKC,GAAG,YACN,4BAGEL,EAAIM,KAAI,SAACC,EAAKC,GAAN,OACN,wBAAIC,IAAOD,GACT,2BAAOE,KAAK,WAAWL,GAAIG,EAAGG,KAAMJ,EAAKK,MAAOL,EAAKM,SAAU,kBArBtD,SAACL,GAGpB,IAAMM,EAAYX,EAAQG,KAAI,SAACS,EAAOC,GAAR,OAPhC,SAAqBD,EAAOC,EAAOR,GACjC,OAAIQ,IAAUR,GAAaO,EAAsBA,EAMDE,CAAYF,EAAOC,EAAOR,MAE1EJ,EAAWU,GAKXb,EAASD,EAAIkB,QAAO,SAACX,EAAKC,GAAN,OAAYM,EAAUN,OAWqCW,CAAaX,MAClF,2BAAOY,QAASb,GAAhB,IAAuBA,EAAvB,YC9BC,SAASc,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MAAS,EAC3BrB,mBAAS,IADkB,mBAC5CsB,EAD4C,KACtCC,EADsC,KAoBnD,OACE,oCACE,0EACA,4BAAQC,QApBI,SAACC,GAGf,IAAMC,EAAW,GAEjBL,EAAMM,SAAQ,SAACL,IAEW,IAApBF,EAASQ,QAGJR,EAASS,SAASP,EAAKQ,YAF9BJ,EAASK,KAAKT,EAAKA,SAOvBC,EAAQG,EAASM,KAAKC,MAAMD,KAAKE,SAAWR,EAASE,WAKzBzB,GAAG,UAA7B,2BACA,yBAAKA,GAAG,QAAQmB,ICxBP,SAASa,EAAT,GAAiC,IAAlBrC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,SAAY,EAETC,mBAAS,IAFA,mBAEtCoC,EAFsC,KAE1BC,EAF0B,OAGbrC,mBAAS,IAHI,mBAGtCoB,EAHsC,KAG5BkB,EAH4B,KAkBvCC,EAAU,SAACT,EAAUR,GAEzBkB,MAAM,WAAY,CAChBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAACf,SAAUA,EAAUR,KAAMA,MAE/CwB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAGrB,OAEE,mDAEG,IACD,2BACExC,KAAK,OACLE,MAAO0B,EACPzB,SA1Ba,SAACc,GAClB,IAAMhB,EAAOgB,EAAMwB,cAAcvC,MACjC2B,EAAc5B,MA2BZ,kBAAC,EAAD,CAAUX,IAAKA,EAAKC,SAAU,SAAAqB,GAAQ,OAAIkB,EAAYlB,MAEtD,4BAAQI,QAtCA,SAACC,GACXL,EAAShB,KAAI,SAAA0B,GAAQ,OAAIS,EAAQT,EAAUM,MAC3CC,EAAc,IACda,MAAMd,EAAa,2BACnBrC,GAAS,IAkCeI,GAAG,UAAzB,WCWSgD,MApDf,WAAe,MAGSnD,oBAAS,GAHlB,mBAGNoD,EAHM,KAGDC,EAHC,OAImBrD,mBAAS,IAJ5B,mBAINoB,EAJM,KAIIkB,EAJJ,OAKyBtC,mBAAS,IALlC,mBAKNsD,EALM,KAKOC,EALP,OAOuBvD,mBAAS,IAPhC,mBAONwD,EAPM,KAOMC,EAPN,KAQPC,EAAe,YAAO,IAAIC,IAAIH,IAuBpC,OAhBAI,qBAAU,WAJRpB,MAAM,aACHM,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAAI,OAAIO,EAAeP,QAEH,IAO9BY,qBAAU,WAJRpB,MAAM,kBACHM,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAAI,OAAIS,EAAcT,QAEG,IAUjC,yBAAKa,UAAU,OACb,0BAAMC,KAAK,gGAAgGC,IAAI,eAC/G,gCAAK,0BAAMC,KAAK,MAAMC,aAAW,SAA5B,kBAAL,8BAEA,0BAAMD,KAAK,MAAMC,aAAW,SAA5B,kBAFA,MAKEb,GACA,oCACE,kBAAC,EAAD,CAAUtD,IAAK4D,EAAiB3D,SAAU,SAAAqB,GAAQ,OAAIkB,EAAYlB,MAClE,kBAACD,EAAD,CAASC,SAAUA,EAAUC,MAAOiC,IACpC,4BAAQ9B,QAlBA,SAACC,GACf4B,GAAO,GACPa,QAAQC,IAAI,mBAgBoBhE,GAAG,cAA7B,sBAIHiD,GAAO,kBAACjB,EAAD,CAAKrC,IAAK4D,EAAiB3D,SAAU,kBAAMsD,GAAO,QC1C5Ce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.7781df06.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Category.css';\n\n\nexport default function Category({ cat, callback }) {\n  \n  // TODO: fix this to be length of cat\n  const [checked, setChecked] = useState([false, false, false,false,false,false, false, false,false,false]);\n\n  function changeCheck(check, index, i) {\n    if (index === i) { return !check } else { return check };\n  }\n\n  const handleChange = (i) => {\n    // console.log('selected category:' + cat[i])\n    // console.log('checked is' + checked)\n    const newChecks = checked.map((check, index) => changeCheck(check, index, i));\n    \n    setChecked(newChecks);\n    // FIX: checked doesn't get updated, why? so temp, using newChecks\n    // console.log('checked: ' + checked);\n    // callback\n    // console.log('handle:' + cat.filter((tag, i) => newChecks[i]));\n    callback(cat.filter((tag, i) => newChecks[i]));\n  };\n\n  return (\n    <div>\n      <div id=\"cat_tags\">\n        <ul>\n        {\n          //functional programming\n          cat.map((tag, i) => (\n            <li key = {i}>\n              <input type=\"checkbox\" id={i} name={tag} value={tag} onChange={() => handleChange(i)} />\n              <label htmlFor={tag}> {tag} </label>\n            </li>\n          ))\n        }\n        </ul>\n      </div>\n    </div>\n  );\n}","import React, { useState } from 'react';\nimport './App.css';\n\n// Display: contains display of pickup line as well as more and plus buttons\n\nexport default function Display({ selected, lines }) {\n  const [line, setLine] = useState('');\n\n  const another = (event) => {\n    // GET all lines from the selected categories\n    // random pickup line\n    const posLines = [];\n   \n    lines.forEach((line) => {\n      // temp FIX: if no categories are selected, add all lines\n      if (selected.length === 0){\n        posLines.push(line.line);\n      }\n      else if (selected.includes(line.category)) {\n        posLines.push(line.line);\n      }\n    });\n    \n    setLine(posLines[Math.floor(Math.random() * posLines.length)]);\n  };\n  return (\n    <>\n      <p>*selecting no categories gives a random one</p>\n      <button onClick={another} id=\"button\"> Give me a pickup line!</button>\n      <div id=\"line\">{line}</div>\n    </>\n  );\n}\n\n","import React, { useState } from 'react';\nimport Category from './Category.jsx';\n\n// Add Component: contains input box for text as well as categories to check off and add button\n\nexport default function Add({ cat, callback }) {\n\n  const [pickupline, setPickupline] = useState('');\n  const [selected, setSelected] = useState([]);\n\n  const add = (event) => {\n    selected.map(category => addLine(category, pickupline))     \n    setPickupline('');\n    alert(pickupline + ' was added ðŸ’–');\n    callback(false);\n  };\n\n  const changeDesc = (event) => {\n    const name = event.currentTarget.value;\n    setPickupline(name)\n  };\n\n  // POST request using fetch\n  const addLine = (category, line) => {\n\n    fetch('/addLine', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({category: category, line: line})\n    })\n      .then(res => res.json)    \n  }\n\n  return (\n\n    <div>\n      Add a pick up line:\n      {' '}\n      <input\n        type=\"text\"\n        value={pickupline}\n        onChange={changeDesc}\n      />\n\n      <Category cat={cat} callback={selected => setSelected(selected)} />\n\n      <button onClick={add} id=\"button\">\n        Submit\n      </button>\n\n    </div>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Category from './Category.jsx';\nimport Display from './Display.jsx';\nimport Add from './Add.jsx';\n\n// serves as parent component that passes information between the cateogry and display components\nfunction App() {\n\n  // state contains which categories are checked off and whether the add form should be displayed\n  const [add, setAdd] = useState(false);\n  const [selected, setSelected] = useState([]);\n  const [pickupLines, setPickupLines] = useState([]);\n\n  const [categories, setCategories] = useState([]);\n  const noDupCategories = [...new Set(categories)];\n\n  const fetchLines = () => {\n    fetch('/getLines')\n      .then(res => res.json())\n      .then(json => setPickupLines(json));\n  }\n  useEffect(() => fetchLines(), []);\n\n  const fetchCategories = () => {\n    fetch('/getCategories')\n      .then(res => res.json())\n      .then(json => setCategories(json));\n  }\n  useEffect(() => fetchCategories(), []);\n\n\n  const showAdd = (event) => {\n    setAdd(true);\n    console.log(\"setAdd to true\")\n  };\n\n\n  return (\n    <div className=\"App\">\n      <link href=\"https://fonts.googleapis.com/css2?family=Karla:ital,wght@0,400;0,700;1,400;1,700&display=swap\" rel=\"stylesheet\"></link>\n      <h1> <span role=\"img\" aria-label=\"heart\"> ðŸ’˜ </span> \n      Find Your Next Pickup Line! \n      <span role=\"img\" aria-label=\"heart\"> ðŸ’˜ </span> </h1>\n\n      {/* conditional rendering */}\n      {!add &&\n        <>\n          <Category cat={noDupCategories} callback={selected => setSelected(selected)} />\n          <Display selected={selected} lines={pickupLines}/>\n          <button onClick={showAdd} id=\"add_button\">\n            Add a Pickup Line\n          </button>\n        </>}\n      {add && <Add cat={noDupCategories} callback={() => setAdd(false)} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n"],"sourceRoot":""}